services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: backend-express
    ports:
      - ${PORT}:${PORT}
    working_dir: /app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    container_name: postgres
    image: postgres:15.6-alpine
    ports:
      - '${DB_HOST_PORT}:${DB_PORT}'
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER:-postgres}
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', '${DB_USER:-postgres}', '-d', '${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis-cache
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass $$REDIS_PASSWORD --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
      else
        redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
      fi
      "
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - |
          if [ -n "$$REDIS_PASSWORD" ]; then
            redis-cli -a $$REDIS_PASSWORD ping
          else
            redis-cli ping
          fi
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  data:
  redis_data:
